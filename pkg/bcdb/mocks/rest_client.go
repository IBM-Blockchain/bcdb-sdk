// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"

	time "time"
)

// RestClient is an autogenerated mock type for the RestClient type
type RestClient struct {
	mock.Mock
}

// Query provides a mock function with given fields: ctx, endpoint, httpMethod, postData, signature
func (_m *RestClient) Query(ctx context.Context, endpoint string, httpMethod string, postData []byte, signature []byte) (*http.Response, error) {
	ret := _m.Called(ctx, endpoint, httpMethod, postData, signature)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, []byte) *http.Response); ok {
		r0 = rf(ctx, endpoint, httpMethod, postData, signature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte, []byte) error); ok {
		r1 = rf(ctx, endpoint, httpMethod, postData, signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Submit provides a mock function with given fields: ctx, endpoint, msg, serverTimeout
func (_m *RestClient) Submit(ctx context.Context, endpoint string, msg protoreflect.ProtoMessage, serverTimeout time.Duration) (*http.Response, error) {
	ret := _m.Called(ctx, endpoint, msg, serverTimeout)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, protoreflect.ProtoMessage, time.Duration) *http.Response); ok {
		r0 = rf(ctx, endpoint, msg, serverTimeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, protoreflect.ProtoMessage, time.Duration) error); ok {
		r1 = rf(ctx, endpoint, msg, serverTimeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
